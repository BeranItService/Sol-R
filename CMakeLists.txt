cmake_minimum_required(VERSION 2.6)

set(PROJECT_NAME SolR)
project(${PROJECT_NAME})

set(${PROJECT_NAME}_VERSION_MAJOR 0)
set(${PROJECT_NAME}_VERSION_MINOR 1)
set(${PROJECT_NAME}_VERSION_PATCH 0)

set(CPACK_PACKAGE_VERSION_MAJOR "${${PROJECT_NAME}_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${${PROJECT_NAME}_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${${PROJECT_NAME}_VERSION_PATCH}")

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# ================================================================================
# Project
# ================================================================================

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING
      "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release RelWithDebInfo MinSizeRel)
endif(NOT CMAKE_BUILD_TYPE)

set(SOLR_ENGINE "CUDA" CACHE STRING "engine use (CUDA or OPENCL)")
set_property(CACHE SOLR_ENGINE PROPERTY STRINGS CUDA OPENCL)

# Windows' math include does not define constants by default.
# Set this definition so it does.
# Also set NOMINMAX so the min and max functions are not overwritten with macros.
IF(MSVC)
    add_definitions(-D_USE_MATH_DEFINES)
    add_definitions(-DNOMINMAX)
ENDIF()

# ================================================================================
# GLUT
# ================================================================================
find_package(GLUT REQUIRED SYSTEM)
include_directories(${GLUT_INCLUDE_DIRS})
link_directories(${GLUT_LIBRARY_DIRS})
add_definitions(${GLUT_DEFINITIONS})
if(NOT GLUT_FOUND)
    message(ERROR " GLUT not found!")
endif(NOT GLUT_FOUND)
	
# ================================================================================
# OpenCL
# ================================================================================
if (${SOLR_ENGINE} STREQUAL "OPENCL")
  find_package(OpenCL REQUIRED)
  if (OPENCL_FOUND)
    list(APPEND FIND_PACKAGES_DEFINES USE_OPENCL)
    message(STATUS "OpenCL found and selected for build")
    include_directories(${OPENCL_INCLUDE_DIRS})
  else()
    message(STATUS "OpenCL not found. Project will not be built with that technology")
  endif()
endif()

# ================================================================================
# CUDA
# ================================================================================
if (${SOLR_ENGINE} STREQUAL "CUDA")
  find_package(CUDA REQUIRED)
  if (CUDA_FOUND)
    list(APPEND FIND_PACKAGES_DEFINES USE_CUDA)
    message(STATUS "CUDA found and selected for build")
    include_directories(${CUDA_TOOLKIT_INCLUDE})
  else()
    message(STATUS "CUDA not found. Project will not be built with that technology")
  endif()

  if (WIN32)
    set(EXTRA_CXX_FLAGS "/DVERBOSE /D_CRT_SECURE_NO_WARNINGS")
    list(APPEND CUDA_NVCC_FLAGS "-arch=sm_30;--compiler-options;-O2;-DVERBOSE")
  endif()
  if (UNIX)
    if (APPLE)
      set(EXTRA_CXX_FLAGS "-DVERBOSE -msse2")
      list(APPEND CUDA_NVCC_FLAGS "-arch=sm_30;--compiler-options;-O2;-DVERBOSE")
    else()
      set(EXTRA_CXX_FLAGS "-DVERBOSE -msse2 -std=c++0x ")
      list(APPEND CUDA_NVCC_FLAGS "-arch=sm_30;--compiler-options;-O2;-DVERBOSE")
    endif()
  endif()
endif()

# ================================================================================
# Project
# ================================================================================
add_subdirectory(solr)
add_subdirectory(apps)

# ================================================================================
# Write defines.h and options.cmake
# ================================================================================
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_CURRENT_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${PROJECT_SOURCE_DIR}/${PROJECT_INCLUDE_NAME}/generated/defines${SYSTEM}.h")
#list(APPEND COMMON_INCLUDES ${DEFINES_FILE})
file(WRITE ${DEFINES_FILE}
  "// generated by CMake/FindPackages.cmake, do not edit.\n\n"
  "#ifndef ${PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF}=1)
  file(APPEND ${DEFINES_FILE}
  "#ifndef ${DEF}\n"
  "#  define ${DEF} 1\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
file(APPEND ${DEFINES_FILE}
  "\n#endif\n")
